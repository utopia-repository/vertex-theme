* {
  background-clip: padding-box;
  -GtkToolButton-icon-spacing: 4;
  -GtkTextView-error-underline-color: $error_color;

  -GtkScrolledWindow-scrollbar-spacing: 0;

  -GtkToolItemGroup-expander-size: 11;
  -GtkTreeView-expander-size: 11;

  -GtkTreeView-horizontal-separator: 4;

  -GtkWidget-text-handle-width: 20;
  -GtkWidget-text-handle-height: 20;

  -GtkDialog-button-spacing: 4;
  -GtkDialog-action-area-border: 0;

  // We use the outline properties to signal the focus properties
  outline-color: transparentize($fg_color, 0.7);
  outline-style: dashed;
  outline-offset: -3px;
  outline-width: 1px;
  -gtk-outline-radius: 2px;
}


//
// Base States
//
.background {
  color: $fg_color;
  background-color: $bg_color;
}

//   This wildcard seems unavoidable, need to investigate.
//   Wildcards are bad and troublesome, use them with care,
//   or better, just don't.
//   Everytime a wildcard is used a kitten dies, painfully.
*:disabled {
  -gtk-icon-effect: dim;
}

.gtkstyle-fallback {
  background-color: $bg_color;
  color: $fg_color;
  &:hover {
    background-color: lighten($bg_color, 10%);
    color: $fg_color;
  }
  &:active {
    background-color: darken($bg_color, 10%);
    color: $fg_color;
  }
  &:disabled {
    background-color: $insensitive_bg_color;
    color: $insensitive_fg_color;
  }
  &:selected {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:selected {
    &, &:focus {
      @extend %selected_items;
      text-shadow: 0 -1px $dark_text_icon_shadow;
      border-radius: 2px;
    }
  }
}

.view,
textview {
  text {
    @extend %view;

    selection { &:focus, & { @extend %selected_items; }}
  }
}

iconview { @extend .view; }

rubberband,
.rubberband {
  border: 1px solid darken($selected_bg_color, 10%); 
  background-color: transparentize(darken($selected_bg_color, 10%), 0.8); 
}

flowbox {
  rubberband { @extend rubberband }

  flowboxchild {
    padding: 3px;
    border-radius: 2px;

    &:selected {
      @extend %selected_items;

      outline-offset: -2px;
    }
  }
}

label {
  &.separator {
    @extend .dim-label;

    color: transparentize($fg_color, 0.2);
  }

  row:selected &,
  &:selected { @extend %nobg_selected_items; }

  selection {
    color: $selected_fg_color;
    background-color: $selected_bg_color;
  }

  &:disabled {
    color: $insensitive_fg_color;

    selection { @extend %selected_items:disabled; }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

assistant {
  .sidebar {
    background-color: $sidebar_bg;
    border-top: 1px solid $borders_color;
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar label { padding: 6px 12px; }

  .sidebar label.highlight {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
    text-shadow: 0 -1px $dark_text_icon_shadow; 
    -gtk-icon-shadow: none;
  }
}

textview {
  background-color: $base_color;
}

%osd,
.osd {
  color: $osd_fg_color;
  outline-color: transparentize($osd_fg_color, 0.7);
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  box-shadow: none;
  text-shadow: 0 -1px $osd_text_shadow;
  -gtk-icon-shadow: 0 -1px $osd_text_shadow;
}

.stack-switcher.osd { background-color: transparent; } // no background-color needed here
                                                       // see gnome-weather
//
// Spinner Animation
//
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

spinner {
  background-image: none;
  opacity: 0; // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme('process-working-symbolic');

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled {
      opacity: 0.5;
    }
  }
}

//
// Text Entries
//
entry {
  min-height: 20px;
  padding: 2px 8px;
  transition: all 200ms $ease-out-quad;

  @include entry(normal);

  caret-color: currentColor;
  background-color: $base_color; // fixes bug in abiword

  // icons inside the entry
  image {
    color: $fg_color;

    &:hover { color: $fg_color; }
    &:active { color: $selected_bg_color; }

    &.left { padding-left: 0; padding-right: 5px; }
    &.right { padding-right: 0; padding-left: 5px; }
  }

  &.flat {
    &, &:focus {
      min-height: 0;
      padding: 2px;
      background-color: $entry_bg_color;
      background-image: none;
      border: none;
      border-radius: 0;
      box-shadow: none;
    }
  }

  &:focus { @include entry(focus); }

  &:disabled { @include entry(insensitive); }

  selection {
    &, &:focus { @extend %selected_items; }
  }

  // error and warning style
  @each $e_type, $e_color in (warning, $warning_color),
                             (error, $error_color),
                              // entry.search-missing for Gnome Builder
                             (search-missing, $error_color) {
    &.#{$e_type} {
      color: $e_color;
      background-image: _solid(mix($e_color, $entry_bg_color, 20%));

      image { color: $e_color; }

      selection, selection:focus {
        background-color: $e_color;
      }
    }
  }

  .osd & {
    @include entry(osd);
    &:focus { @include entry(osd-focus); }
    &:disabled { @include entry(osd-insensitive); }
  }

  progress {
    margin: 0 -6px;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: $selected_bg_color;
    border-style: solid;
    background-image: none;
    background-color: transparent;
    box-shadow: none;
    border-image: none;
  }

  // Linked Entries
  .linked:not(.vertical) > & { @extend %entry_linked; }
  .linked.vertical > & { @extend %entry_linked_vertical; }
}

// Extends for linked entries
%entry_linked_middle {
  @include linked(entry, normal, middle);
  &:focus { @include linked(entry, focused, middle) }  
}

%entry_linked {
  @extend %entry_linked_middle;

  &:first-child {
    @include linked(entry, normal, left);
    &:focus { @include linked(entry, focused, left) }
  }
  &:last-child {
    @include linked(entry, normal, right);
    &:focus { @include linked(entry, focused, right) }
  }
  &:only-child {
    @include linked(entry, normal, single);
    &:focus { @include linked(entry, focused, single); }
  }
}

%entry_linked_middle_vertical {
  @include linked(entry, normal, middle-vertical);
  &:focus { @include linked(entry, focused, middle-vertical); }
}

%entry_linked_vertical {
  @extend %entry_linked_middle_vertical;

  &:first-child {
    @include linked(entry, normal, top-vertical);
    &:focus { @include linked(entry, focused, top-vertical); }
  }
  &:last-child {
    @include linked(entry, normal, bottom-vertical);
    &:focus { @include linked(entry, focused, bottom-vertical); }
  }
  &:only-child {
    @include linked(entry, normal, single);
    &:focus { @include linked(entry, focused, single); }
  }
}

//
// Buttons
//

// stuff for .needs-attention
$_dot_color: if($variant=='light', $selected_bg_color,
                                   lighten($selected_bg_color,15%));
@keyframes needs_attention {
  from {
    background-image: -gtk-gradient(radial, center center, 0, center center, 0.01, to($_dot_color), to(transparent));
  }
  to {
    background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to($selected_bg_color), to(transparent));
  }
}

button {
  $_button_transition: all 200ms $ease-out-quad;

  min-height: 20px;
  min-width: 20px;
  transition: $_button_transition;
  padding: 2px 6px;
  outline-offset: -4px;

  @include button(normal);

  separator { margin: 4px 1px; }

  &.flat { 
    @include button(undecorated);
    text-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
    -gtk-icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
    // to avoid adiacent buttons borders clashing when transitioning, the transition on the normal state is set
    // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
    // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
    // in this case the duration is increased.
    transition: none;

    &:hover {
      transition: $_button_transition;
      transition-duration: 350ms;

      &:active {
        transition: $_button_transition;
        transition-duration: 50ms;
      }
    }
  }
  &:focus { @include button(focus); }

  &:hover {
    @include button(hover);
    -gtk-icon-effect: highlight;
  }

  &:active, &:checked {
    @include button(active);
    transition-duration: 50ms;
  }

  &.flat:disabled { @include button(undecorated); }

  &:disabled {
    @include button(insensitive);

    &:active, &:checked {
      @include button(insensitive-active);
    }
  }

  &.image-button {
    min-width: 32px;
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button {
    padding-left: 16px;
    padding-right: 16px;
  }

  &.text-button.image-button {
    padding-left: 8px;
    padding-right: 8px;

    label {
      padding-left: 8px;
      padding-right: 8px;
    }
  }

  &:drop(active) {
    color: $drop_target_color;
  }

  // big standalone buttons like in Documents pager
  &.osd {
    @include button(osd);

    &:hover { @include button(osd-hover); }
    &:active, &:checked { @include button(osd-active); }
    &:disabled { @include button(osd-insensitive); }

    &.image-button {
      padding: 0;
      min-height: 36px;
      min-width: 36px;
    }
  }

  //overlay / OSD style
  .osd &,
  .osd .linked:not(.vertical) > & {
    @include button(osd, $border:false);

    &:hover, &.flat:hover { @include button(osd-hover, $border:false); }
    &:active, &:checked { @include button(osd-active, $border:false); }
    &:disabled { @include button(osd-insensitive, $border:false); }

    &.flat, &.flat:only-child:not(:hover) {
      @include button(undecorated);

      border: 1px solid transparent;

      text-shadow: 0 -1px $osd_text_shadow;
      -gtk-icon-shadow: 0 -1px $osd_text_shadow;

      &:hover { color: $selected_bg_color; }
      &:disabled { color: $osd_insensitive_fg_color; }
      &:active, &:checked { @include button(osd-active); }
    }

    @extend %header_linked;
  }

  // Suggested and Destructive Action buttons
  $_destructive: $destructive_color_a, $destructive_color_b;
  $_suggested: $suggested_color_a, $suggested_color_b;

  @each $b_type, $b_color in (suggested, $_suggested),
                              (destructive, $_destructive) {
    &.#{$b_type}-action {
      color: $selected_fg_color;
      outline-color: transparentize($selected_fg_color, 0.7);
      background-image: linear-gradient(to bottom, nth($b_color, 1), nth($b_color, 2));

      text-shadow: 0 -1px $action_button_shadow;
      -gtk-icon-shadow: 0 -1px $action_button_shadow;

      @include _border(button-normal-border-#{$b_type}#{$asset_suffix});

      &:hover {
        background-image: linear-gradient(to bottom, lighten(nth($b_color, 1), 4%), lighten(nth($b_color, 2), 2%));
      }
      &:active, &:checked {
        color: $selected_fg_color;
        background-image: linear-gradient(to bottom, darken(nth($b_color, 2), 5%), darken(nth($b_color, 1), 5%));

        @include _border(button-active-border-#{$b_type}#{$asset_suffix});
      }
      &:disabled {
        color: transparentize($selected_fg_color, 0.4);
        background-image: _solid(transparentize(nth($b_color, 1), 0.2));

        text-shadow: none;
        -gtk-icon-shadow: none;

        > image, label { color: inherit; }

        &:active, &:checked {
          background-image: _solid(transparentize(nth($b_color, 1), 0.1));

          > image, label { color: inherit; }
        }
      }
    }
    .linked > &.#{$b_type}-action,
    .linked > &.#{$b_type}-action:hover { @extend %#{$b_type}_linked; }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -3px; // needs to be set or it gets overridden by GtkRadioButton outline-offset

    > label {
      padding-left: 6px;  // label padding
      padding-right: 6px; //
    }
    > image {
      padding-left: 6px;   // image padding
      padding-right: 6px;  //
      padding-top: 3px;    //
      padding-bottom: 3px; //
    }
    &.text-button {
      padding-left: 10px;
      padding-right: 10px;
    }
    &.image-button {
      padding-left: 2px;
      padding-right: 2px;
    }

    &.needs-attention {

      > label, > image { @extend %needs_attention; }

      &:active, &:checked {
        > label, > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  %needs_attention {
    animation: needs_attention 150ms ease-in;
    background-image: -gtk-gradient(radial, center center, 0, center center, 0.5, to($selected_bg_color), to(transparent)),
                      -gtk-gradient(radial, center center, 0, center center, 0.5, to(rgba(255, 255, 255, 0.2)), to(transparent));
    background-size: 6px 6px, 6px 6px;
    background-repeat: no-repeat;
    background-position: right 3px, right 4px;

    &:dir(rtl) { background-position: left 3px, left 4px; }
  }

  //inline-toolbar buttons
  .inline-toolbar & { @extend %linked; }

  .linked:not(.vertical) > &,
  .linked:not(.vertical) > &:hover { @extend %linked; }

  .linked.vertical > &,
  .linked.vertical > &:hover { @extend %linked_vertical; }
}

// all the following is for the +|- buttons on inline toolbars, that way
// should really be deprecated...
.inline-toolbar toolbutton > button {     // redefining the button look is
                                          // needed since those are flat...
  @include button(normal);
  &:hover { @include button(hover); }
  &:active,
  &:checked{ @include button(active); }
  &:disabled { @include button(insensitive); }
  &:disabled:active,
  &:disabled:checked { @include button(insensitive-active); }
}

// More inline toolbar buttons
toolbar.inline-toolbar toolbutton {
  & > button.flat { @extend %linked_middle; }
  &:first-child > button.flat { @extend %linked:first-child; }
  &:last-child > button.flat { @extend %linked:last-child; }
  &:only-child > button.flat { @extend %linked:only-child; }
}

// Extends for linked buttons
%linked_middle {
  @include linked(button, normal, middle);
  &:active, &:checked { @include linked(button, active, middle); }
}

%linked {
  @extend %linked_middle;

  &:first-child {
    @include linked(button, normal, left);
    &:active, &:checked { @include linked(button, active, left); }
  }
  &:last-child {
    @include linked(button, normal, right);
    &:active, &:checked { @include linked(button, active, right); }
  }
  &:only-child {
    @include linked(button, normal, single);
    &:active, &:checked { @include linked(button, active, single); }
  }
}

%linked_middle_vertical {
  @include linked(button, normal, middle-vertical);
  &:active, &:checked { @include linked(button, active, middle-vertical); }
}

%linked_vertical {
  @extend %linked_middle_vertical;

  &:first-child {
    @include linked(button, normal, top-vertical);
    &:active, &:checked { @include linked(button, active, top-vertical); }
  }
  &:last-child {
    @include linked(button, normal, bottom-vertical);
    &:active, &:checked { @include linked(button, active, bottom-vertical); }
  }
  &:only-child {
    @include linked(button, normal, single);
    &:active, &:checked { @include linked(button, active, single); }
  }
}

// Linked destructive and suggested action buttons
@each $b_type in (suggested, destructive) {
  %#{$b_type}_linked_middle {
    @include linked(button, normal, middle, $action_type:$b_type);
    &:active, &:checked { @include linked(button, active, middle, $action_type:$b_type); }  
  }

  %#{$b_type}_linked {
    @extend %#{$b_type}_linked_middle;

    &:first-child {
      @include linked(button, normal, left, $action_type:$b_type);
      &:active, &:checked { @include linked(button, active, left, $action_type:$b_type); }
    }
    &:last-child {
      @include linked(button, normal, right, $action_type:$b_type);
      &:active, &:checked { @include linked(button, active, right, $action_type:$b_type); }
    }
    &:only-child {
      @include linked(button, normal, single, $action_type:$b_type);
      &:active, &:checked { @include linked(button, active, single, $action_type:$b_type); }
    }
  }
}

%undecorated_button {
  border-color: transparent;
  border-image: none;
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  text-shadow: none;
  -gtk-icon-shadow: none;
}

// menu buttons
menuitem.button.flat,
modelbutton.flat {
  min-height: 22px;
  padding-left: 8px;
  padding-right: 8px;
  outline-offset: -3px;
  outline-color: transparentize($fg_color, 0.7);
  border: 1px solid transparent;
  border-radius: 2px;

  @extend %undecorated_button;

  &:hover {
    @if $variant=='light' {
      border: 1px solid transparentize(black, 0.8);
      border-bottom-color: transparentize(black, 0.75);
      box-shadow: inset 0 1px $highlight_shadow;
    }
    @else {
      border: 1px solid transparentize(black, 0.6);
      border-bottom-color: transparentize(black, 0.45);
      box-shadow: inset 0 1px $highlight_shadow;
    }
    background-image: linear-gradient(to bottom,
                                      transparentize($button_gradient_color_a, 0.6),
                                      transparentize($button_gradient_color_b, 0.7));
  }
  &:active, &:checked { color: $fg_color; }
  &:active:hover, &:checked:hover {
    color: $button_active_fg;
    outline-color: transparentize($button_active_fg, 0.7);
    box-shadow: inset 0 1px 2px transparentize(black, 0.85);
    background-image: linear-gradient(to bottom,
                                      transparentize($button_active_gradient_color_a, 0.3),
                                      transparentize($button_active_gradient_color_b, 0.3));
    border: 1px solid transparentize(black, 0.5);
    border-top-color: transparentize(black, 0.35);
    text-shadow: 0 -1px transparentize($button_active_text_shadow, 0.3);
  }

  // FIXME: temporary workaround
  check:last-child,
  radio:last-child { margin-left: 8px; }

  check:first-child,
  radio:first-child { margin-right: 8px; }
}

modelbutton.flat arrow {
  &, &:hover { background: none; }
  &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }
  &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
}

//
// Links
//
*:link {
  color: $link_color;

  &:visited {
    color: $link_visited_color;
    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 60%); }
  }
  &:hover {
    color: lighten($link_color,10%);
    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 90%); }
  }
  &:active {
    color: $link_color;
    *:selected & { color: mix($selected_fg_color, $selected_bg_color, 80%); }
  }

  @at-root %link_selected,
  &:selected,
  *:selected & { color: mix($selected_fg_color, $selected_bg_color, 80%); }
}

button:link, button:visited {
  @extend %undecorated_button;
  @extend *:link;

  &:hover, &:active, &:checked {
    @extend %undecorated_button;
  }
  > label { text-decoration-line: underline; }
}

//
// Spinbuttons
//
spinbutton {
  &:drop(active) { box-shadow: none; }

  &:disabled { color: $insensitive_fg_color; }

  &:not(.vertical) {
    button.down { @extend %linked; }
    button.up {
      &:dir(ltr) { @extend %linked:last-child; }
      &:dir(rtl) { @extend %linked:first-child; }
    }

    entry {
      min-width: 28px;

      &:dir(ltr) { @extend %entry_linked:first-child; }
      &:dir(rtl) { @extend %entry_linked:last-child; }
    }
  }
  &.vertical {
    button, entry {
      padding-left: 4px;
      padding-right: 4px;
      min-width: 0;
    }

    button.up { @extend %linked_vertical:first-child; }
    button.down { @extend %linked_vertical:last-child; }

    entry { @extend %entry_linked_vertical; }
  }

  // OSD Spinbuttons
  .osd & {
    &:not(.vertical) {
      button.down { @extend %header_linked; }
      button.up {
        &:dir(ltr) { @extend %header_linked:last-child; }
        &:dir(rtl) { @extend %header_linked:first-child; }
      }

      entry {
        min-width: 28px;

        &:dir(ltr) { @extend %header_entry_linked:first-child; }
        &:dir(rtl) { @extend %header_entry_linked:last-child; }
      }
    }
  }
}

// vertically linked spinbuttons
.linked.vertical > spinbutton:not(.vertical) {
  @extend %entry_linked_vertical;
  background-color: $entry_bg_color;

  entry, button {
    &, &:hover, &:focus, &:active {
      background: none;
      border: none;
      box-shadow: none;
    }
  }
  button {
    &, &:hover, &:focus, &:active {
      -gtk-icon-shadow: none;

      &:dir(ltr) { box-shadow: inset 1px 0 transparentize(black, 0.9); }
      &:dir(rtl) { box-shadow: inset -1px 0 transparentize(black, 0.9); }
    }
    &:hover { color: transparentize($fg_color, 0.5); }
    &:active { color: transparentize($fg_color, 0.3); }
  }
}

//
// ComboBoxes
//
combobox {
  button.combo {
    min-width: 0;       // otherwise the arrow placement is unsymmetric
    padding-left: 8px;  //
    padding-right: 8px  //
  }
  arrow {
    -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    min-height: 16px;
    min-width: 16px;
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) { @extend %linked:last-child; }
      &:dir(rtl) { @extend %linked:first-child; }
    }
  }

  .linked:not(.vertical)> & > box > button.combo {
    // the combobox is a composite widget so the way we do button linking doesn't
    // work, special case needed.
    &:dir(ltr),
    &:dir(rtl) { @extend %linked_middle; } // specificity bump
  }

  .linked:not(.vertical) > &:first-child > box > button.combo { @extend %linked:first-child; }
  .linked:not(.vertical) > &:last-child > box > button.combo { @extend %linked:last-child; }
  .linked:not(.vertical) > &:only-child > box > button.combo { @extend %linked:only-child; }

  .linked.vertical > & > box > button.combo { @extend %linked_middle_vertical; }
  .linked.vertical > &:first-child > box > button.combo { @extend %linked_vertical:first-child; }
  .linked.vertical > &:last-child > box > button.combo { @extend %linked_vertical:last-child; }
  .linked.vertical > &:only-child > box > button.combo { @extend %linked_vertical:only-child; }
}

//
// Toolbars
//
toolbar {
  -GtkWidget-window-dragging: true;
  padding: 4px;
  background-color: $bg_color;

  separator { background: none; }
  &.horizontal separator { margin: 0 6px; }
  &.vertical separator { margin: 6px 0; }

  .osd & { background-color: transparent; }

  &.osd {
    padding: 10px;
    border: 1px solid transparentize(black, 0.25);
    border-radius: 3px;
    box-shadow: inset 0 1px transparentize(white, 0.9),
                inset 0 -1px transparentize(black, 0.9);
    background-image: linear-gradient(to bottom, $osd_toolbar_bg_a, $osd_toolbar_bg_b);
    background-color: transparent;

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars

    &.top { border-width: 0 0 1px 0; }
    &.bottom { border-width: 1px 0 0 0; }
    &.left { border-width: 0 1px 0 0; }
    &.right { border-width: 0 0 0 1px; }
  }

  &:not(.inline-toolbar) {
    switch,
    scale,
    entry,
    spinbutton,
    button {
      margin-right: 1px;
      margin-bottom: 1px;
    }
    .linked > button,
    .linked > entry { margin-right:0; }
  }
}

// primary toolbars
.primary-toolbar {
  -GtkWidget-window-dragging: true;
  padding: 4px;
  color: $wm_title;
  background-image: linear-gradient(to bottom,
                                    $primary_toolbar_bg_a,
                                    $primary_toolbar_bg_b);
  border-width: 0 0 1px 0;
  border-style: solid;
  border-image: linear-gradient(to bottom, $primary_toolbar_bg_a,
                                           if($darker=='false', $borders_color, nth($_borders_color, 3))) 1 0 1 0; //temporary hack for rhythmbox 3.1

  &:disabled {
    background-image: none;
    background-color: darken($bg_color, 3%);
    border-color: darken($bg_color, 9%);
    text-shadow: none;
    color: $insensitive_fg_color;
  }
  separator {
    @include _border(header-separator#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 1px, $image-width: 0 1 0 1 / 0 1px 0 1px);
  }
  // make widgets on dark primary toolbars dark
  @if $darker=='true' { @extend %dark_widgets; }
}

//searchbar, location-bar & inline-toolbar
.inline-toolbar,
toolbar.inline-toolbar {
  border-width: 0 1px 1px;
  padding: 3px;
  border-radius: 0  0 3px 3px;
}

actionbar,
.inline-toolbar,
toolbar.inline-toolbar {
  border-color: $borders_color;
  border-style: solid;

  @extend %action-bar-background;
}

actionbar {
  padding: 6px;
  border-top: 1px solid $borders_color;
}

%action-bar-background {
  background-color: transparent;
  box-shadow: inset 0 1px $highlight_shadow;

  @if $variant==light {
    background-image: linear-gradient(to bottom,
                                      $bg_color,
                                      darken($bg_color, 4%));
  }
  @else {
    background-image: linear-gradient(to bottom,
                                      lighten($bg_color, 1%),
                                      darken($bg_color, 2%));
  }
}

searchbar,
.location-bar {
  padding: 3px; 
  border-width: 0 0 1px;
  border-style: solid;
  border-color: $borders_color;
  background-color: if($variant=='light', lighten($bg_color, 1%), darken($bg_color, 2.3%));
  box-shadow: inset 0 3px 3px -1px if($variant=='light', rgba(0, 0, 0, 0.1), rgba(0,0,0,0.17));
}

//
// Header bars
//
headerbar,
%titlebar {
  min-height: 38px;
  padding: 0 6px;

  color: $wm_title;
  border-width: 0 0 1px;
  border-style: solid;
  border-radius: 0;
  border-color: if($darker=='false', $borders_color, nth($_borders_color, 3));
  background-color: transparent;
  background-image: linear-gradient(to bottom,
                                    $wm_bg_a,
                                    $wm_bg_b);
  box-shadow: inset 0 1px $wm_highlight;

  .title {
    color: $wm_title;
    font-weight: bold;
    padding: 0px 12px;
    text-shadow: 0 #{$shadow_pos * $darker_shadow_pos}px $wm_title_shadow;
  
    &:backdrop {
      color: transparentize($wm_title, 0.5);
      text-shadow: 0 #{$shadow_pos * $darker_shadow_pos}px transparentize($wm_title_shadow, 0.4);
    }
  }
  .subtitle {
    color: $wm_title;
    font-size: 82%;
    padding: 0 12px;
    @extend .dim-label;

    &:backdrop { opacity: 0.3; }
  }
  // Fix pushed buttons which inherit their color from .title
  button.title:active, button.title:checked,
  button:active label.title, button:checked label.title {
    color: $button_active_fg;
    text-shadow: 0 -1px $button_active_text_shadow;
    -gtk-icon-shadow: 0 -1px $button_active_text_shadow;
  }

  // Separators
  separator.titlebutton {
    min-width: 0;

    @include _border(header-separator#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 1px, $image-width: 0 1 0 1 / 0 1px 0 1px);
  }
  .right separator.titlebutton,
  .left:dir(rtl) separator.titlebutton { margin-left: 4px; margin-right: -2px }

  .left separator.titlebutton,
  .right:dir(rtl) separator.titlebutton { margin-right: 4px; margin-left: -2px }

  // Selectionmode
  &.selection-mode {
    color: $selected_fg_color;
    text-shadow: 0 -1px $selection_button_text_shadow;
    border-color: $selection_toolbar_border;
    background-image: linear-gradient(to bottom,
                                      $selection_toolbar_bg_a,
                                      $selection_toolbar_bg_b);
    box-shadow: inset 0 1px if($variant=='light', lighten($selection_toolbar_bg_a, 10%), transparentize(white, 0.7));

    .title {
      color: $selected_fg_color;
      text-shadow: 0 -1px $selection_button_text_shadow;
     }
    .subtitle { 
      color: $selected_fg_color;
      @extend .dim-label;
    }
    // Separators
    separator.titlebutton {
      @include _border(header-separator-selectionmode#{$darker_asset_suffix}, $prefix:assets, $radius: 0, $width: 0 1px 0 1px, $image-width: 0 1 0 1 / 0 1px 0 1px);
    }

    // Selectionmode buttons
    button {
      @include button(selection-mode, $darker);
      &.flat { @include button(undecorated); }
      &:hover { @include button(selection-mode-hover, $darker); }
      &:active, &:checked { @include button(selection-mode-active, $darker); }
      &.flat:disabled {
        @include button(undecorated);
      }
      &:disabled {
        @include button(selection-mode-insensitive, $darker);
        &:active, &:checked {
          @include button(selection-mode-insensitive-active, $darker);
        }
      }
      &.suggested-action {
        @include button(normal, $darker);
        &:hover { @include button(hover, $darker); }
        &:active, &:checked {
          @include button(active, $darker);
          @include _border(button-active-border-suggested#{$darker_asset_suffix});
        }
        &:disabled { @include button(insensitive, $darker); }
      }
    }
    .selection-menu {
      border-image: none;
      border-color: transparentize($selected_bg_color,1);
      background-image: _solid(transparentize($selected_bg_color,1));
      box-shadow: none;
      padding-left: 10px;
      padding-right: 10px;
      GtkArrow { -GtkArrow-arrow-scaling: 1; }
      .arrow {
        -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
        color: transparentize($selected_fg_color,0.5);
        -gtk-icon-shadow: none;
      }
    }
  }
  &.selection-mode .linked:not(.vertical) > button,
  &.selection-mode .linked:not(.vertical) > button:hover { @extend %header_suggested_linked }

  &.selection-mode .linked:not(.vertical) > button.suggested-action,
  &.selection-mode .linked:not(.vertical) > button.suggested-action:hover { @extend %header_linked }

  .tiled &,
  .maximized & {
    border-radius: 0; // squared corners when the window is max'd or tiled
  }

  &.default-decoration {
    min-height: 26px;
    padding: 0 3px;
    background-color: $metacity_bg_a;
    background-image: linear-gradient(to bottom,
                                $metacity_bg_a,
                                $metacity_bg_b);
    border-bottom: none;
  }

  @if $darker=='true' {
    // make widgets in dark headerbars dark
    @extend %dark_widgets;
  }
}

headerbar {
}

.titlebar {
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
}

headerbar {
  entry, button, separator {
    margin-top: 6px;
    margin-bottom: 6px;
  }

  // Fixes split headerbars
  separator:first-child + &,
  &:first-child { border-top-left-radius: 3px; }

  &:last-child { border-top-right-radius: 3px; }

  .maximized &, .tiled & {
    &:first-child, &:last-child { border-radius: 0; }
  }
}

.titlebar:not(headerbar) {
  window.csd > & {
    // in csd we assume every titlebar is a headerbar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
    box-shadow: none;
  }

  > separator { background: if($darker=='false', $borders_color, nth($_borders_color, 3)); }

  @extend %titlebar;
}

// Extends for widgets in dark Headerbars and toolbars
%dark_widgets {

// Entries
  entry {
    @include entry(normal, $dark:'true');
  
    image {
      &, &:hover ,&:active { color: inherit; }
    }

    &:focus { @include entry(focus, $dark:'true'); }
    &:disabled { @include entry(insensitive, $dark:'true'); }

    // error and warning style
    @each $e_type, $e_color in (warning, $warning_color),
                               (error, $error_color) {
      &.#{$e_type} {
        color: $e_color;
        background-image: _solid(mix($e_color, nth($_entry_bg_color, 2), 20%));
        text-shadow: none;
        -gtk-icon-shadow: none;

        image { color: $e_color; }

        selection, selection:focus {
          background-color: $e_color;
        }
      }
    }

    progress {
      border-radius: 0;
      border-width: 0 0 2px;
      border-color: $selected_bg_color;
      border-style: solid;
      background-image: none;
      background-color: transparent;
      box-shadow: none;
      border-image: none;
    }
  }
  .linked:not(.vertical) > entry { @extend %header_entry_linked; }

// Buttons
  button {
    @include button(normal, $dark:'true');

    &.flat { 
      @include button(undecorated);
      text-shadow: 0 -1px nth($_light_text_icon_shadow, 2);
      -gtk-icon-shadow: 0 -1px nth($_light_text_icon_shadow, 2);
    }
    &:focus { @include button(focus, $dark:'true'); }
    &:hover { @include button(hover, $dark:'true'); }
    &:active, &:checked { @include button(active, $dark:'true'); }
    &:disabled { @include button(insensitive, $dark:'true'); }
    &.flat:disabled { @include button(undecorated); }
    &:disabled:active, &:disabled:checked { @include button(insensitive-active, $dark:'true'); }

  // Suggested and Destructive Action buttons
    $_destructive: $destructive_color_a, $_destructive_color_b;
    $_suggested: nth($_suggested_color_a, 2), nth($_suggested_color_b, 2);

    @each $b_type, $b_color in (suggested, $_suggested),
                                (destructive, $_destructive) {
      &.#{$b_type}-action {
        color: $selected_fg_color;
        outline-color: transparentize($selected_fg_color, 0.7);
        background-image: linear-gradient(to bottom, nth($b_color, 1), nth($b_color, 2));

        text-shadow: 0 -1px $action_button_shadow;
        -gtk-icon-shadow: 0 -1px $action_button_shadow;

        @include _border(button-normal-border-#{$b_type}-dark);

        &:hover {
          background-image: linear-gradient(to bottom, lighten(nth($b_color, 1), 4%), lighten(nth($b_color, 2), 2%));
        }
        &:active, &:checked {
          color: $selected_fg_color;
          background-image: linear-gradient(to bottom, darken(nth($b_color, 2), 5%), darken(nth($b_color, 1), 5%));

          @include _border(button-active-border-#{$b_type}-dark);
        }
        &:disabled {
          color: transparentize($selected_fg_color, 0.4);
          background-image: _solid(transparentize(nth($b_color, 1), 0.2));

          text-shadow: none;
          -gtk-icon-shadow: none;

          > label, image { color: inherit; }

          &:active, &:checked {
            background-image: _solid(transparentize(nth($b_color, 1), 0.1));

            > label, image { color: inherit; }
          }
        }
      }
    }
  }
  .linked:not(.vertical) > button,
  .linked:not(.vertical) > button:hover { @extend %header_linked; }

  .linked:not(.vertical) > button.suggested-action,
  .linked:not(.vertical) > button.suggested-action:hover { @extend %header_suggested_linked; }

  .linked:not(.vertical) > button.destructive-action,
  .linked:not(.vertical) > button.destructive-action:hover { @extend %header_destructive_linked; }

// Comboboxes
  combobox {
    &.linked {
      button:nth-child(2) {
        &:dir(ltr) { @extend %header_linked:last-child; }
        &:dir(rtl) { @extend %header_linked:first-child; }
      }
    }
    .linked > & > button.combo {
      &:dir(ltr),
      &:dir(rtl) { @extend %header_linked_middle; } // specificity bump
    }
    .linked:not(.vertical) > &:first-child > button.combo { @extend %header_linked:first-child; }
    .linked:not(.vertical) > &:last-child > button.combo { @extend %header_linked:last-child; }
    .linked:not(.vertical) > &:only-child > button.combo { @extend %header_linked:only-child; }
  }

// Spinbuttons
  spinbutton {
    &:disabled { color: nth($_insensitive_fg_color, 2); }

    &:not(.vertical) {
      button.down { @extend %header_linked; }
      button.up {
        &:dir(ltr) { @extend %header_linked:last-child; }
        &:dir(rtl) { @extend %header_linked:first-child; }
      }

      &:dir(ltr) entry { @extend %header_entry_linked:first-child; }
      &:dir(rtl) entry { @extend %header_entry_linked:last-child; }
    }
  }

// Scale
  scale {

  &.horizontal trough {
      background-image: linear-gradient(to bottom,
                                        nth($_trough_bg_color_a, 2),
                                        nth($_trough_bg_color_b, 2));
      @include _border(scale-trough-border-dark, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

      highlight { // make the highlight a little lighter here for better contrast
        background-image: linear-gradient(to bottom,
                                          lighten(nth($_scale_highlight_bg_a, 2), 5%),
                                          lighten(nth($_scale_highlight_bg_b, 2), 5%));
        @include _border(scale-highlight-border-dark, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

        &:disabled {
          background-image: linear-gradient(to bottom,
                                            darken(nth($_scale_highlight_bg_b, 2), 9%),
                                            darken(nth($_scale_highlight_bg_b, 2), 4%));
        }
      }
      &:disabled {
        box-shadow: inset 0 1px 2px transparentize(black, 0.9);

        background-image: linear-gradient(to bottom,
                                          darken(nth($_scale_highlight_bg_b, 2), 11%),
                                          darken(nth($_scale_highlight_bg_b, 2), 8%));
      }
    }

  // Scale sliders
    @each $k,$l in ('',''),
                   (':hover','-hover'),
                   (':active','-active'),
                   (':disabled','-insensitive') {

      // load scale sliders from .png files in assets directory

      slider#{$k} {
        background-image: -gtk-scaled(url("assets/slider#{$l}-dark.png"),url("assets/slider#{$l}-dark@2.png"));
      }
    }
  }

// Progressbars
  progressbar {
    color: transparentize(nth($_fg_color, 2), 0.3);

    &.horizontal trough {
      box-shadow: inset 0 1px 1px transparentize(black, 0.9);
      background-image: linear-gradient(to bottom,
                                        darken(nth($_trough_bg_color_a, 2), 2%),
                                        darken(nth($_trough_bg_color_b, 2), 5%));
      @include _border(trough-border-dark, $radius: 2px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);
    }
  }

// Switch
  switch {

    @each $k,$l in ('',''),
                   (':checked','-active'),
                   (':disabled','-insensitive'),
                   (':checked:disabled','-active-insensitive') {

      // load switch troughs from .png files in assets directory

      &#{$k} {
        background-image: -gtk-scaled(url("assets/switch#{$l}-dark.png"),url("assets/switch#{$l}-dark@2.png"));
      }

      // load switch sliders from .png files in assets directory
      // only normal and insensitive states
      @if $k =='' or $k ==':disabled' {
        slider#{$k} {
          background-image: -gtk-scaled(url("assets/switch-slider#{$l}-dark.png"),url("assets/switch-slider#{$l}-dark@2.png"));
        }
      }
    }
  }

  // Colorbutton
  button.color {
    colorswatch:only-child {
      box-shadow: 0 -1px nth($_light_text_icon_shadow, 2);

      &:disabled { box-shadow: none; }
    }
    &:active colorswatch:only-child,
    &:checked colorswatch:only-child { box-shadow: none; }
  }
}

// Extends for dark linked entries
%header_entry_linked_middle {
  @include linked(entry, normal, middle, $dark:'true');
  &:focus { @include linked(entry, focused, middle, $dark:'true') }  
}

%header_entry_linked {
  @extend %header_entry_linked_middle;

  &:first-child {
    @include linked(entry, normal, left, $dark:'true');
    &:focus { @include linked(entry, focused, left, $dark:'true') }
  }
  &:last-child {
    @include linked(entry, normal, right, $dark:'true');
    &:focus { @include linked(entry, focused, right, $dark:'true') }
  }
  &:only-child {
    @include linked(entry, normal, single, $dark:'true');
    &:focus { @include linked(entry, focused, single, $dark:'true'); }
  }
}

// Extends for dark linked buttons
%header_linked_middle {
  @include linked(button, normal, middle, $dark:'true');
  &:active, &:checked { @include linked(button, active, middle, $dark:'true') }  
}

%header_linked {
  @extend %header_linked_middle;

  &:first-child {
    @include linked(button, normal, left, $dark:'true');
    &:active, &:checked { @include linked(button, active, left, $dark:'true') }
  }
  &:last-child {
    @include linked(button, normal, right, $dark:'true');
    &:active, &:checked { @include linked(button, active, right, $dark:'true') }
  }
  &:only-child {
    @include linked(button, normal, single, $dark:'true');
    &:active, &:checked { @include linked(button, active, single, $dark:'true'); }
  }
}

// Headerbar linked destructive and suggested action buttons
@each $b_type in (suggested, destructive) {
  %header_#{$b_type}_linked_middle {
    @include linked(button, normal, middle, $action_type:$b_type, $dark:'true');
    &:active, &:checked { @include linked(button, active, middle, $action_type:$b_type, $dark:'true'); }  
  }

  %header_#{$b_type}_linked {
    @extend %header_#{$b_type}_linked_middle;

    &:first-child {
      @include linked(button, normal, left, $action_type:$b_type, $dark:'true');
      &:active, &:checked { @include linked(button, active, left, $action_type:$b_type, $dark:'true'); }
    }
    &:last-child {
      @include linked(button, normal, right, $action_type:$b_type, $dark:'true');
      &:active, &:checked { @include linked(button, active, right, $action_type:$b_type, $dark:'true'); }
    }
    &:only-child {
      @include linked(button, normal, single, $action_type:$b_type, $dark:'true');
      &:active, &:checked { @include linked(button, active, single, $action_type:$b_type, $dark:'true'); }
    }
  }
}

.primary-toolbar button,                             // tango icons don't need shadows
.primary-toolbar button.flat { -gtk-icon-shadow: none; }  // defined here so it doesn't get overriden

//
// Pathbars
//
.path-bar button {
  &.text-button, &.image-button, & {
    padding-left: 6px;
    padding-right: 6px;
  }

  &.text-button.image-button label { padding-left: 0; padding-right: 0; }

  &.text-button.image-button, & {
    label:last-child { padding-right: 10px; }
    label:first-child { padding-left: 10px; }
  }

  &.slider-button,
  &:not(.image-button):not(.text-button) {
    padding-left: 1px;
    padding-right: 1px;
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }
}

//
// Tree Views
//
treeview.view {
  -GtkTreeView-grid-line-width: 1;
  -GtkTreeView-grid-line-pattern: '';
  -GtkTreeView-tree-line-width: 1;
  -GtkTreeView-tree-line-pattern: '';
  -GtkTreeView-expander-size: 16;

  border-left-color: transparentize($fg_color, 0.85);   // this is actually the tree lines color,
  border-top-color: transparentize(black, 0.9);         // while this is the grid lines color, better then nothing

  rubberband { @extend rubberband; }                   // to avoid borders being overridden by the previously set props

  acceleditor > label { background-color: $selected_bg_color; }

  &:selected {
    &, &:focus {
      border-radius: 0;

      @extend %selected_gradient;
    }
  }

  &:disabled {
    color: $insensitive_fg_color;

    &:selected { color: mix($selected_fg_color, $selected_bg_color, 50%); }
  }

  &.separator {
    min-height: 2px;
    color: transparentize(black, 0.9);
  }

  &:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: mix($fg_color, $selected_bg_color, 50%);

    &.after { border-top-style: none; }
    &.before { border-bottom-style: none; }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    color: $fg_color;

    &:hover { color: transparentize($fg_color, 0.5); }

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 80%);
      &:hover { color: $selected_fg_color; }
    }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }
  // progressbar in treeviews
  &.progressbar, &.progressbar:focus {
    color: $selected_fg_color;
    border-radius: 2px;
    border: 1px solid $progressbar_border;
    background-image: linear-gradient(to bottom,
                                      $progressbar_background_a,
                                      $progressbar_background_b);

    box-shadow: inset 0 1px $progressbar_highlight;

    text-shadow: none;
    -gtk-icon-shadow: none;

    &:selected { @extend treeview.view.progressbar }
  }
  // progressbar trough in treeviews
  &.trough, &.trough:focus {
    padding: 0 0 1px 0;
    color: $selected_fg_color;
    box-shadow: inset 0 1px 1px transparentize(black, 0.9);
    background-image: linear-gradient(to bottom,
                                      if($variant=='light', darken($trough_bg_color_a, 5%), darken($trough_bg_color_a, 2%)),
                                      if($variant=='light', darken($trough_bg_color_b, 11%), darken($trough_bg_color_b, 5%)));
    @include _border(trough-border#{$asset_suffix}, $radius: 1px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);

    &:selected {
      background-image: linear-gradient(to bottom,
                                        if($variant=='light', transparentize(darken($trough_bg_color_a, 5%), 0.2), transparentize(darken($trough_bg_color_a, 2%), 0.2)),
                                        if($variant=='light', transparentize(darken($trough_bg_color_b, 11%), 0.2), transparentize(darken($trough_bg_color_b, 5%), 0.2)));
      @if $variant == 'light' {
        @include _border(trough-border-selected, $radius: 1px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);
      }
    }
  }

  header {
    button {
      &, &:hover, &:active, &:active:hover, &:disabled {
        border-width: 1px;
        border-style: none solid solid none;
        border-image: none;
        background-image: none;
        border-radius: 0;
        text-shadow: none;
        -gtk-icon-shadow: none;
      }

      min-height: 0;
      min-width: 0;
      padding: 3px 6px;
      background-color: $base_color;
      border-color: transparentize($borders_color, 0.6);

      &:hover { color: mix($base_color, $fg_color, 40%); }
      &:active:hover { color: $fg_color; }
      &:disabled { background-color: $bg_color; }

      &:last-child {
        border-right-style: none;
      }
    }
  }

  button.dnd,
  header.button.dnd {
    &, &:selected, &:hover, &:active {
      padding: 0 6px;
      transition: none;
      color: $selected_fg_color;
      background-color: $selected_bg_color;
      border-radius: 0;
      border: none;
      background-image: none;
      text-shadow: none;
      -gtk-icon-shadow: none;
    }
  }
}

//
// Menus
//
menubar,
.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0px;
  color: $wm_title;
  background-color: $primary_toolbar_bg_a;

  > menuitem {
    padding: 4px 8px;
    text-shadow: 0 #{$shadow_pos * $darker_shadow_pos}px $wm_title_shadow;

    &:hover { //Seems like it :hover even with keyboard focus
      background-color: $base_color;
      color: $fg_color;
      border-radius: 3px 3px 0 0;
      text-shadow: none;
    }

    &:disabled {
      color: if($darker=='false', $insensitive_fg_color, nth($_insensitive_fg_color, 2));
      box-shadow: none;
      text-shadow: none;

      > label { color: inherit; }
    }
  }
}

menu,
.menu {
  $_menu_bg: if($variant=='light', $base_color, darken($base_color, 2%));

  margin: 4px;
  padding: 3px 0;
  background-color: $_menu_bg;
  border: 1px solid $borders_color;

  .csd & { border: none; }

  separator,
  .csd & separator {
    margin: 2px 0;
  }

  menuitem {
    min-width: 40px;
    min-height: 16px;
    padding: 4px;
    border: solid transparent;
    border-width: 1px 0 1px 0;
    text-shadow: none;
    -gtk-icon-shadow: none;

    &:hover { @extend %selected_gradient; }
    &:disabled { color: $insensitive_fg_color; }

    //submenu indicators
    arrow {
      min-height: 16px;
      min-width: 16px;

      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
        margin-left: 10px;
      }
      &:dir(rtl) {
        -gtk-icon-source:-gtk-icontheme('pan-end-symbolic-rtl');
        margin-right: 10px;
      }
    }
    @at-root menuitem {
      accelerator { color: gtkalpha(currentColor,0.7); }

      check, radio {
        min-height: 16px;
        min-width: 16px;
        &:dir(ltr) { margin-right: 4px; margin-left: 0; }
        &:dir(rtl) { margin-left: 4px; margin-right: 0; }
      }
    }
  }
  // overflow buttons
  > arrow {
    @include button(undecorated);

    min-width: 16px;
    min-height: 16px;
    padding: 4px;
    background-color: $_menu_bg;
    border-radius: 0;

    &.top {
      margin-top: -6px;
      border-bottom: 1px solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
    }
    &.bottom {
      margin-bottom: -6px;
      border-top: 1px solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
    }
    &:hover { background-color: mix($fg_color, $base_color, 10%); }
    &:disabled {
      color: transparent;
      background-color: transparent;
      border-color: transparent ;
    }
  }
}

//
// Popovers
//
popover,
popover.background {
  background-clip: border-box;
  padding: 2px;
  border-radius: 3px;
  background-color: if($variant=='light', darken($base_color, 2%), mix($bg_color,$base_color, 80%));

  box-shadow: 0 1px 3px transparentize($wm_shadow, 0.2);

  text-shadow: none;
  -gtk-icon-shadow: none;

  .csd &, & { border: 1px solid $borders_color; }

  list { background-color: $base_color; }

  > list,
  > .view,
  > toolbar {
    border: none;
    background: none;
    box-shadow: none;
  }

  &, .csd & {
    &.osd, &.magnifier { @extend %osd; }
    &.touch-selection { @extend .context-menu }

    &.osd { @extend %osd; }
  }

  button.flat,
  button.flat:hover {
    transition: none;
  }

  separator { margin: 3px; }
  list separator { margin: 0px; }
}

//touch selection handlebars for the Popover.osd above
cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;
  &.top { -gtk-icon-source: -gtk-icontheme('selection-start-symbolic'); }
  &.bottom { -gtk-icon-source: -gtk-icontheme('selection-end-symbolic'); }
}

//
// Notebooks and Tabs
//
notebook {
  padding: 0;

  &.frame {
    border: 1px solid $borders_color;
    border-radius: 2px;
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: $notebook_bg_color;
  }

  > header {
    background-color: if($variant=='light', $notebook_bg_color, darken($notebook_bg_color, 2.5%));

    $_header_shade: inset 0 2px 3px -1px transparentize(black, 0.85);
    &.top {
      box-shadow: $_header_shade,
                  inset 0 -1px transparentize($borders_color, 0.5); // border
    }
    &.bottom {
      box-shadow: $_header_shade,
                  inset 0 1px transparentize($borders_color, 0.5);
    }
    &.right {
      box-shadow: $_header_shade,
                  inset 1px 0 transparentize($borders_color, 0.5);
    }
    &.left {
      box-shadow: $_header_shade,
                  inset -1px 0 transparentize($borders_color, 0.5);
    }

    &.top, &.bottom { padding: 0 7px; }
    &.left, &.right { padding: 7px 0; }

    > tabs > tab {
      padding: 5px 20px;
      border: 1px solid transparent;
      background-color: transparent;
      outline-offset: -4px;
    }

    &.top > tabs > tab.reorderable-page,
    &.bottom > tabs > tab.reorderable-page {
      padding-left: 12px;  // for a nicer close button
      padding-right: 12px; // placement
    }
    &.top > tabs > tab {
      border-width: 0 1px 1px 1px;
      border-radius: 0 0 2px 2px;
    }
    &.bottom > tabs > tab {
      border-width: 1px 1px 0 1px;
      border-radius: 2px 2px 0 0;
    }
    &.left > tabs > tab {
      border-width: 1px 1px 1px 0; 
      border-radius: 0;
    }
    &.right > tabs > tab {
      border-width: 1px 0 1px 1px;
      border-radius: 0;
    }

    //here's the interesting stuff
    > tabs > tab {
      &:hover {
        border-color: $borders_color;
        background-color: if($variant=='light', transparentize(black, 0.975), transparentize(white, 0.975));
      }
      &:checked {
        border-color: $borders_color;

        &:hover { border-color: darken($borders_color, 5%); }
      }
    }

    @each $_tab, $_border in (top, bottom),
                             (bottom, top),
                             (left, right),
                             (right, left) {
      &.#{$_tab} > tabs > tab {
        // tab overlap
        @if $_tab==top or $_tab==bottom { margin-right: -1px; }
        @else { margin-bottom: -1px; }

        border-image: linear-gradient(to $_border,
                                      transparentize($borders_color, 0.3),
                                      transparentize($bg_color, 1));

        &:hover { border-image: none; }

        &:checked {
          @if $_tab == top {
            background-image: linear-gradient(to bottom,
                                              $notebook_tab_gradient_a,
                                              $notebook_tab_gradient_b);
          }
          @else {
            background-image: linear-gradient(to $_border,
                                              $notebook_tab_gradient_b,
                                              $notebook_tab_gradient_a);
          }
          border-image: none;
        }
      }
    }
    &.top, &.bottom { > tabs > tab { border-image-slice: 0 1 0 1; }}
    &.left, &.right { > tabs > tab { border-image-slice: 1 0 1 0; }}

    // overflow arrows
    &.top, &.bottom {
      > tabs > arrow.up {
        -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
        &:last-child { margin-left: 7px; }
      }
      > tabs > arrow.down {
        -gtk-icon-source: -gtk-icontheme('pan-start-symbolic');
        &:first-child { margin-right: 7px; }
      }
    }
    &.left, &.right {
      > tabs > arrow.up {
        -gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
        &:last-child { margin-top: 7px; }
      }
      > tabs > arrow.down {
        -gtk-icon-source: -gtk-icontheme('pan-up-symbolic');
        &:first-child { margin-bottom: 7px; }
      }
    }
    > tabs > arrow {
      color: mix($fg_color, $bg_color, 80%);

      &:hover { color: mix($fg_color, $bg_color, 60%); }
      &:active { color: $fg_color; }
      &:disabled { color: transparentize($insensitive_fg_color, 0.3); }
    }
  }

  > header > tabs > tab {
    label {
      padding: 0 2px; // needed for a nicer focus ring
      color: mix($fg_color, $bg_color, 60%);
      text-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
    }
    &:hover label { color: mix($fg_color, $bg_color, 85%); }
    &:checked label { color: $fg_color; }

    // tab close button
    button.flat { //tab close button
      min-height: 18px;
      min-width: 18px;
      padding: 0;
      border: 1px solid transparent;
      border-radius: 2px;

      transition-duration: 100ms;

      color: mix($fg_color, $bg_color, 35%);
      -gtk-icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;

      &:last-child { margin-right: -5px; margin-left: 5px; }
      &:first-child { margin-left: -5px; margin-right: 5px;}

      &:hover {
        border: 1px solid if($variant=='light', $borders_color, transparentize(white, 0.9));
        color: lighten(red, 10%);
        background-image: none;
        box-shadow: none;
      }
      &:active {
        border: 1px solid $borders_color;
        color: $fg_color;
        background-image: linear-gradient(to bottom, darken($bg_color, 10%), darken($bg_color, 5%));
        box-shadow: inset 0 1px rgba(0, 0, 0, 0.07), inset 0 2px 1px -2px rgba(0, 0, 0, 0.6);
        -gtk-icon-shadow: none;
      }
    }
    &:hover button.flat:not(:hover):not(:active), 
    &:checked button.flat:not(:hover):not(:active) {
      color: $fg_color;
    }
  }
}

//
// Scrollbars
//
scrollbar {
  @at-root * {
    -GtkScrollbar-has-backward-stepper: false;
    -GtkScrollbar-has-forward-stepper: false;
  }

  button { border: none; }

  &.vertical button {
    &.down { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    &.up { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
  }

  &.horizontal button {
    &.down { -gtk-icon-source: -gtk-icontheme('pan-right-symbolic'); }
    &.up { -gtk-icon-source: -gtk-icontheme('pan-left-symbolic'); }
  }

  // Overlay Scrollbars
  &.dragging,                                                             // if this isn't set, the scrollbars don't update their size correctly
  &.hovering { opacity: 0.998; }                                          // probably a gtk bug
  &.overlay-indicator:not(.dragging):not(.hovering) {opacity: 0.999;}     //


  &.overlay-indicator:not(.dragging):not(.hovering) {

    slider {
      margin: 1px;
      min-width: 6px;

      @include _border(scrollbar-slider-overlay#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 4 3 4 3 / 4px 3px 4px 3px);
    }

    &.horizontal slider {
      min-height: 6px;

      @include _border(scrollbar-slider-overlay-horizontal#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 3 4 3 4 / 3px 4px 3px 4px);
    }

    trough {
      min-width: 8px;
      min-height: 8px;
      border: none;
      background: none;
    }
  }
  // Normal Scrollbars / Overlay Scrollbars on Mouseover
  trough {
    min-width: 15px;

    @include _border(scrollbar-trough#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 8 7 8 8 / 8px 7px 8px 8px);

    &:dir(rtl) { @include _border(scrollbar-trough-rtl#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 8 7 8 8 / 8px 7px 8px 8px); }
  }

  &.horizontal trough {
    min-height: 15px;

    @include _border(scrollbar-trough-horizontal#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 8 8 7 8 / 8px 8px 7px 8px);
  }

  slider {
    min-width: 4px;
    margin: 6px 5px 6px 6px;

    &:dir(rtl) { margin: 6px 6px 5px 6px; }

    @include _border(scrollbar-slider#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 3 2 3 2 / 3px 2px 3px 2px);

    &:hover, &:disabled { @include _border(scrollbar-slider-hover#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 3 2 3 2 / 3px 2px 3px 2px); }
    &:active { @include _border(scrollbar-slider-active#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 3 2 3 2 / 3px 2px 3px 2px); }
  }

  &.horizontal slider {
    min-height: 4px;
    margin: 6px 6px 5px 6px;

    @include _border(scrollbar-slider-horizontal#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 2 3 2 3 / 2px 3px 2px 3px);

    &:hover, &:disabled { @include _border(scrollbar-slider-horizontal-hover#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 2 3 2 3 / 2px 3px 2px 3px); }
    &:active { @include _border(scrollbar-slider-horizontal-active#{$asset_suffix}, $prefix:assets, $radius: 0, $width: 0, $image-width: 2 3 2 3 / 2px 3px 2px 3px); }
  }

  &.vertical slider {
    min-height: 64px;
  }
  &.horizontal slider {
    min-width: 64px;
  }
}

//
// Switch
//
switch {
  font-size: 1px;

  min-width: 60px;
  min-height: 27px;

  margin: 0 -8px;

  slider {
    min-width: 22px;
    min-height: 23px;

    margin: 0 8px;
  }

  &, slider {
    color: transparent;
    background-repeat: no-repeat;
    background-position: center center;
    border: none;
    box-shadow: none;
  }
}

$_list: ('','');
@if $variant == 'light' { $_list: ('',''), ('row:selected ','-selected'); } // special cased switches in selected list-rows only in light variant

@each $i,$j in $_list {

  @each $k,$l in ('',''),
                 (':checked','-active'),
                 (':disabled','-insensitive'),
                 (':checked:disabled','-active-insensitive') {

    // load switch troughs from .png files in assets directory

    #{$i}switch#{$k} {
      background-image: -gtk-scaled(url("assets/switch#{$l}#{$j}#{$asset_suffix}.png"),url("assets/switch#{$l}#{$j}#{$asset_suffix}@2.png"));
    }

    // load switch sliders from .png files in assets directory
    // only normal and insensitive states and no special case for selected list-rows
    @if $i =='' {
      @if $k =='' or $k ==':disabled' {
        #{$i}switch slider#{$k} {
          background-image: -gtk-scaled(url("assets/switch-slider#{$l}#{$j}#{$asset_suffix}.png"),url("assets/switch-slider#{$l}#{$j}#{$asset_suffix}@2.png"));
        }
      }
    }
  }
}

//
// Check and Radio items
//

// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly
@each $w,$a in ('check', 'checkbox'),
               ('radio','radio') {

  //standard checks and radios
  @each $s,$as in ('','-unchecked'),
                  (':disabled','-unchecked-insensitive'),
                  (':indeterminate', '-mixed'),
                  (':indeterminate:disabled', '-mixed-insensitive'),
                  (':checked', '-checked'),
                  (':checked:disabled','-checked-insensitive') {
    #{$w}#{$s},
    treeview.#{$w}#{$s} {
      -gtk-icon-source: -gtk-scaled(url("assets/#{$a}#{$as}#{$asset_suffix}.png"),
                                    url("assets/#{$a}#{$as}#{$asset_suffix}@2.png"));
      -gtk-icon-shadow: none;
    }
    // the borders of checks and radios are
    // too similar in luminosity to the selected background color, hence
    // we need special casing.
    .view #{$w}#{$s}:selected,
    .view #{$w}#{$s}:selected:focus,
    treeview.#{$w}#{$s}:selected,
    treeview.#{$w}#{$s}:selected:focus,
    menuitem #{$w}#{$s}:hover,
    row:selected #{$w}#{$s} {
      background: none;
      -gtk-icon-source: -gtk-scaled(url("assets/#{$a}#{$as}-selected#{$asset_suffix}.png"),
                                    url("assets/#{$a}#{$as}-selected#{$asset_suffix}@2.png"));
    }

    // OSD
    .osd #{$w}#{$s} {
      -gtk-icon-source: -gtk-scaled(url("assets/#{$a}#{$as}-dark.png"),
                                    url("assets/#{$a}#{$as}-dark@2.png"));
    }
  }
}

// big selectionmode checkboxes
@each $s,$as in ('','-unchecked'),
                (':checked', '-checked') {
  .view.content-view.check#{$s}:not(.list) {
    -gtk-icon-source: -gtk-scaled(url("assets/grid-selection#{$as}#{$asset_suffix}.png"),
                                  url("assets/grid-selection#{$as}#{$asset_suffix}@2.png"));
    background-color: transparent;
  }
}

checkbutton, radiobutton {
  // this is for a nice focus on check and radios text
  &.text-button {
    padding: 1px 2px 4px;
    outline-offset: 0;
  }

  label:not(:only-child) {
    &:first-child { margin-left: 4px; }
    &:last-child { margin-right: 4px; }
  }
}

radio,
check {
  min-width: 16px;
  min-height: 16px;
  margin: 0 2px;

  &:only-child { margin: 0; }
  menu menuitem & { margin: 0; }
}

//
// GtkScale
//
scale {
  $_marks_length: 3px;
  $_marks_margin: -4px;

  min-height: 19px;
  min-width: 19px;
  padding: 5px;

  value { color: gtkalpha(currentColor, 0.5); }

  marks {
    color: gtkalpha(currentColor, 0.5);

    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                     (bottom, bottom, top),
                                                     (top, left, right),
                                                     (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_margin;
        margin-#{$marks_pos}: -$_marks_margin;
      }
    }
  }

  &.fine-tune marks {
    color: gtkalpha(currentColor, 0.5);

    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom),
                                                     (bottom, bottom, top),
                                                     (top, left, right),
                                                     (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_margin - 2px;
        margin-#{$marks_pos}: -$_marks_margin + 2px;
      }
    }
  }

  &.horizontal indicator {
    min-height: $_marks_length;
    min-width: 1px;
  }
  &.vertical indicator {
    min-height: 1px;
    min-width: $_marks_length;
  }

  &.horizontal.fine-tune { padding-top: 3px; padding-bottom: 3px; }
  &.vertical.fine-tune { padding-left: 3px; padding-right: 3px; }
  &.fine-tune slider { margin: -4px; }

  &.horizontal trough {
    margin: 6px 0 5px 0;
    background-image: linear-gradient(to bottom,
                                      $trough_bg_color_a,
                                      $trough_bg_color_b);
    @include _border(scale-trough-border#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

    fill {
      background: none;
      background-color: transparentize($selected_bg_color, 0.6);
    }

    highlight {
      margin: -1px -5px -2px -5px;
      background-image: linear-gradient(to bottom,
                                        $scale_highlight_bg_a,
                                        $scale_highlight_bg_b);
      @include _border(scale-highlight-border#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

      &:disabled {
        @if $variant==light {
          background-image: linear-gradient(to bottom,
                                            lighten($scale_highlight_bg_b, 11%),
                                            lighten($scale_highlight_bg_b, 16%));
        }
        @else {
          background-image: linear-gradient(to bottom,
                                            darken($scale_highlight_bg_b, 9%),
                                            darken($scale_highlight_bg_b, 4%));
        }
      }
    }
    &:disabled {
      box-shadow: inset 0 1px 2px transparentize(black, 0.9);

      @if $variant==light {
        background-image: linear-gradient(to bottom,
                                          lighten($scale_highlight_bg_b, 23%),
                                          lighten($scale_highlight_bg_b, 28%));
      }
      @else {
        background-image: linear-gradient(to bottom,
                                          darken($scale_highlight_bg_b, 11%),
                                          darken($scale_highlight_bg_b, 8%));
      }
    }

    // Scale troughs in selected list-rows, only in light variant
    @if $variant == 'light' {
      row:selected & {
        @include _border(scale-trough-border-selected#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);
        highlight {
          @include _border(scale-highlight-border-selected#{$asset_suffix}, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);
        }
      }
    }

    //OSD troughs
    .osd & {
      background-image: linear-gradient(to bottom,
                                        $osd_trough_bg_a,
                                        $osd_trough_bg_b);

      box-shadow: inset 0 1px 2px transparentize(black, 0.8);

      @include _border(scale-trough-osd-border, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);

      fill {
        background: none;
        background-color: transparentize($selected_bg_color, 0.6);
      }

      highlight {
        background-image: linear-gradient(to bottom,
                                          transparentize($progressbar_background_a, 0.1),
                                          transparentize($progressbar_background_b, 0.1));
        box-shadow: inset 0 1px $progressbar_highlight;

        @include _border(scale-trough-osd-border, $width: 1px 5px 2px 5px, $image-width: 2 6 3 6 / 2px 6px 3px 6px);
      }
      &:disabled {

      }
    }
  }
  &.vertical trough {
    margin: 0 5px 0 6px;
    background-image: linear-gradient(to right,
                                      $trough_bg_color_a,
                                      $trough_bg_color_b);
    @include _border(scale-trough-vertical-border#{$asset_suffix}, $width: 5px 2px 5px 1px, $image-width: 6 3 6 2 / 6px 3px 6px 2px);

    fill {
      background: none;
      background-color: transparentize($selected_bg_color, 0.6);
    }

    highlight {
      margin: -5px -2px -5px -1px;
      background-image: linear-gradient(to right,
                                        $scale_highlight_bg_a,
                                        $scale_highlight_bg_b);
      @include _border(scale-vertical-highlight-border#{$asset_suffix}, $width: 5px 2px 5px 1px, $image-width: 6 3 6 2 / 6px 3px 6px 2px);

      &:disabled {
        @if $variant==light {
          background-image: linear-gradient(to right,
                                            lighten($scale_highlight_bg_b, 11%),
                                            lighten($scale_highlight_bg_b, 16%));
        }
        @else {
          background-image: linear-gradient(to right,
                                            darken($scale_highlight_bg_b, 9%),
                                            darken($scale_highlight_bg_b, 4%));
        }
      }
    }
    &:disabled {
      box-shadow: inset 1px 0 2px transparentize(black, 0.9);

      @if $variant==light {
        background-image: linear-gradient(to right,
                                          lighten($scale_highlight_bg_b, 23%),
                                          lighten($scale_highlight_bg_b, 28%));
      }
      @else {
        background-image: linear-gradient(to right,
                                          darken($scale_highlight_bg_b, 11%),
                                          darken($scale_highlight_bg_b, 8%));
      }
    }
  }

  slider {
    min-width: 19px;
    min-height: 19px;
    margin: -6px;
  }
  trough {
    outline-offset: 4px;
    -gtk-outline-radius: 2px;
  }
}

@each $i,$j in ('',''), ('row:selected ','-selected') {

  @each $k,$l in ('',''),
                 (':hover','-hover'),
                 (':active','-active'),
                 (':disabled','-insensitive') {

    // load scale sliders from .png files in assets directory

    #{$i}scale slider#{$k} {
      background-image: -gtk-scaled(url("assets/slider#{$l}#{$j}#{$asset_suffix}.png"),url("assets/slider#{$l}#{$j}#{$asset_suffix}@2.png"));
    }
    
    // use dark sliders for osd
    // no list-row special case needed
    @if $i=='' {
      .osd scale slider#{$k} { background-image: -gtk-scaled(url("assets/slider#{$l}-dark.png"),url("assets/slider#{$l}-dark@2.png")); }
    }
  }
}

//
// Progress bars
//
progressbar {
  padding: 0;
  font-size: 83%;
  color: transparentize($fg_color, 0.3);

  &.osd {
    min-width: 3px;
    min-height: 3px;
    background-color: transparent;

    trough {
      background: none;
      border-image: none;
      box-shadow: none;
      padding: 0;
    }

  }
  // moving bit
  progress {
    border: none;

    &.left {
      border-top-left-radius: 1px;
      border-bottom-left-radius: 1px;
    }
    &.right {
      border-top-right-radius: 1px;
      border-bottom-right-radius: 1px;
    }
    &.bottom {
      border-bottom-left-radius: 1px;
      border-bottom-right-radius: 1px;
      box-shadow: none;
    }
    &.top {
      border-top-left-radius: 1px;
      border-top-right-radius: 1px;
    }
    &.left.right { box-shadow: none; }
  }

  &.horizontal progress {
    background-image: linear-gradient(to bottom,
                                      $progressbar_background_a,
                                      $progressbar_background_b);
    box-shadow: inset 0 1px $progressbar_highlight;
  }
  &.vertical progress {
      background-image: linear-gradient(to right,
                                        $progressbar_background_a,
                                        $progressbar_background_b);
      box-shadow: inset 1px 0 $progressbar_highlight;
      border-bottom-width: 1px;
      border-right-width: 2px;
  }

  // trough
  &.horizontal trough { @extend %horizontal_trough; }
  &.vertical trough { @extend %vertical_trough; }
}

%vertical_trough {
  box-shadow: inset 1px 0 1px transparentize(black, 0.9);
  background-image: linear-gradient(to right,
                                    if($variant=='light', darken($trough_bg_color_a, 5%), darken($trough_bg_color_a, 2%)),
                                    if($variant=='light', darken($trough_bg_color_b, 11%), darken($trough_bg_color_b, 5%)));
  @include _border(trough-vertical-border#{$asset_suffix}, $radius: 2px, $width: 1px 2px 1px 1px, $image-width: 2 3 2 2 / 2px 3px 2px 2px);
}

%horizontal_trough {
  box-shadow: inset 0 1px 1px transparentize(black, 0.9);
  background-image: linear-gradient(to bottom,
                                    if($variant=='light', darken($trough_bg_color_a, 5%), darken($trough_bg_color_a, 2%)),
                                    if($variant=='light', darken($trough_bg_color_b, 11%), darken($trough_bg_color_b, 5%)));
  @include _border(trough-border#{$asset_suffix}, $radius: 2px, $width: 1px 1px 2px 1px, $image-width: 2 2 3 2 / 2px 2px 3px 2px);
}

//
// Level Bar
//
levelbar {

  block {
    min-width: 32px;
    min-height: 4px;
  }
  &.vertical block {
    min-width: 4px;
    min-height: 32px;
  }

  trough { padding: 2px; }

  &.horizontal trough { @extend %horizontal_trough; }
  &.vertical trough { @extend %vertical_trough; }

  &.horizontal.discrete block { margin: 0 1px; }
  &.vertical.discrete block { margin: 1px 0; }

  block:not(.empty),
  block.high {
    border: 1px solid $progressbar_border;
    background-image: linear-gradient(to bottom,
                                        lighten($progressbar_background_a, 10%),
                                        $progressbar_background_b 75%,
                                        darken($progressbar_background_a, 15%));
    box-shadow: inset 0 1px $progressbar_highlight;
    border-radius: 1px;
  }
  block.low {
    border-color: $progressbar_border;
    background-image: linear-gradient(to bottom,
                                      lighten($warning_color, 30%),
                                      $warning_color 75%,
                                      darken($warning_color, 10%));
    box-shadow: none;
  }
  block.full {
    border-color: $progressbar_border;
    background-image: linear-gradient(to bottom,
                                      lighten($success_color, 20%),
                                      $success_color 75%,
                                      darken($success_color, 5%));
    box-shadow: none;
  }
  block.empty {
    background-color: transparentize(black, 0.75);
    background-image: none;
    border-color: transparentize(black, 0.8);
    box-shadow: none;
  }
}

//
// Print dialog
//
printdialog {
  paper {
    border: 1px solid $borders_color;
    background: $base_color;
    padding: 0;
  }

  .dialog-action-box { margin: 12px; }
}

//
// Frames
//
frame > border,
.frame {
  margin: 0;
  padding: 0;
  border-radius: 0;
  border: 1px solid $borders_color;

  &.flat { border-style: none; }
}

scrolledwindow {
  viewport.frame { // avoid double borders when viewport inside scrolled window
    border-style: none;
  }

  // This is used by GtkScrolledWindow, when content is touch-dragged past boundaries.
  // This draws a box on top of the content, the size changes programmatically.
  overshoot {
    &.top { @include overshoot(top); }
    &.bottom { @include overshoot(bottom); }
    &.left { @include overshoot(left); }
    &.right { @include overshoot(right); }
  }

  // Overflow indication, works similarly to the overshoot, the size if fixed tho.
  undershoot {
    &.top { @include undershoot(top); }
    &.bottom { @include undershoot(bottom); }
    &.left { @include undershoot(left); }
    &.right { @include undershoot(right); }
  }

  junction { // the small square between two scrollbars
    background-color: $bg_color;
    background-image: none;
    border: none;
  }
}

//vbox and hbox separators
separator {
  background-color: if($variant=='light', transparentize(black, 0.9), transparentize(black, 0.8));
  min-width: 1px;
  min-height: 1px;
}

//
// Lists
//
list {
  border-color: $borders_color;
  background-color: $base_color;

  row { padding: 2px; }
}

row {
  &:not(:hover) { transition: all 150ms $ease-out-quad; }

  &:selected {
    @extend %selected_items;
    text-shadow: 0 -1px $dark_text_icon_shadow;

    button {

      &:focus { @include _border(button-normal-border#{$asset_suffix}); }
      &.flat, &.flat:focus {
        @include button(undecorated);

        color: $selected_fg_color;
        outline-color: transparentize($selected_fg_color, 0.7);
        text-shadow: 0 -1px $dark_text_icon_shadow;
        -gtk-icon-shadow: none;
        &:hover {
          @include button(hover);
        }
        &:active, &:checked {
          @include button(active, $border:'false');
        }
        &:disabled {
          color: transparentize($selected_fg_color, 0.5);
          text-shadow: none;
        }
      }
      &:active, &:checked,
      &:disabled:active, &:disabled:checked,
      &.flat:active, &.flat:checked,
      &.flat:focus:active, &.flat:focus:checked {
        @if $variant == 'light' { @include _border(button-active-border-selected); }
        @if $variant == 'dark' { @include _border(button-active-border-dark); }
      }
    }
  }

  &.activatable {

    .has-open-popup,
    &:hover {
      background-color: if($variant=='light', transparentize(black, 0.95), transparentize(white, 0.95));
    }
    &:active {
      color: $fg_color;
      box-shadow: inset 0 2px 2px -2px transparentize(black,0.8);
    }
    &:selected {
      &:active { 
        color: $selected_fg_color;
        box-shadow: inset 0 2px 3px -1px transparentize(black,0.5);
      }
      &:hover {
        background-color: mix(white, $selected_bg_color, 10%);
      }
      &.has-open-popup,
      &:hover { background-color: mix(black, $selected_bg_color, 10%); }
    }
  }
}

//
// App Notifications
//
.app-notification {
  padding: 10px;
  border-width: 0 1px 1px;
  border-style: solid;
  border-color: if($variant=='light', transparentize(black, 0.8), transparentize(black, 0.5));
  border-radius: 0 0 3px 3px;
  background-image: linear-gradient(to bottom,
                                    if($variant=='light', lighten($bg_color, 2%), lighten($bg_color, 10%)),
                                    if($variant=='light', lighten($bg_color, 1%), lighten($bg_color, 5%)));
  background-clip: padding-box;

  border { border: none; }

}

//
// Expanders
//
expander {
  arrow {
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }
    &:hover { color: lighten($fg_color,30%); } //only lightens the arrow
    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }
}

//
// Calendar
//
calendar {
  color: $fg_color;
  border: 1px solid $borders_color;
  border-radius: 3px;

  &:selected {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
    border-radius: 3px;
  }
  &.header {
    border: 1px solid transparentize(black, 0.9);
    border-radius: 0;
  }
  &.button {
    @extend %undecorated_button;
    color: transparentize($fg_color,0.55);
    &:hover {
      @extend %undecorated_button;
      color: $fg_color;
    }
  }
  &:indeterminate, &.highlight { color: gtkalpha(currentColor,0.55); }
}

//
// Dialogs
//
messagedialog {
  .titlebar { min-height: 18px; }

  .dialog-action-area {
    margin: 4px;

    button {
      &:focus {
        background-image: linear-gradient(to bottom,
                                          $button_hover_gradient_color_a,
                                          $button_hover_gradient_color_b);

        outline-color: transparentize($fg_color, 0.7);
      }
      &:active, &:checked {
        background-image: linear-gradient(to bottom,
                                          $button_active_gradient_color_a,
                                          $button_active_gradient_color_b);

        outline-color: transparentize($button_active_fg, 0.7);
      }
    }
  }
}

//
// Filechooser
//
filechooser {
  #pathbarbox {
    background-color: $bg_color;
    border-bottom: 1px solid transparentize($borders_color, 0.5);
  }
}

button.file:drop(active) { box-shadow: none; }

//
// Sidebar
//
.sidebar {
  border: none;
  background-color: $sidebar_bg;
  color: transparentize($fg_color, 0.2);

  -gtk-icon-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;
  text-shadow: 0 #{$shadow_pos}px $light_text_icon_shadow;

  @at-root %sidebar_left,
  &:dir(ltr),
  &.left,
  &.left:dir(rtl) {
    border-right: 1px solid $borders_color;
    border-left-style: none;
  }

  @at-root %sidebar_right,
  &:dir(rtl),
  &.right {
    border-left: 1px solid $borders_color;
    border-right-style: none;
  }

  list { background-color: transparent; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}

  &:selected { @extend %selected_gradient; }
}

stacksidebar {
  &.sidebar {
    &:dir(ltr) list,
    &.left list,
    &.left:dir(rtl) list { @extend %sidebar_left; }

    &:dir(rtl) list,
    &.right list { @extend %sidebar_right; }
  }

  row {
    padding: 10px 4px;

    > label {
      padding-left: 6px;
      padding-right: 6px;
    }
    &.needs-attention > label {
      @extend %needs_attention;
      background-size: 6px 6px, 0 0;
    }
  }
}

placessidebar {
  > viewport.frame { border-style: none; }

  row {
    color: transparentize($fg_color, 0.2);
    border: solid transparent;
    border-width: 1px 0 1px 0;

    &.has-open-popup,
    &:hover {
      border-color: if($variant=='light', transparentize(black, 0.95), transparentize(white, 0.95));
      background-color: if($variant=='light', transparentize(black, 0.95), transparentize(white, 0.95));
    }
    &:selected {
      @extend %selected_gradient;

      &:active:hover { box-shadow: none; }
    }
    &:disabled { color: $insensitive_fg_color; }

    // Needs overriding of the GtkListBoxRow padding
    min-height: 30px;
    padding: 0px;
    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer {
      padding: 0 9px;
    }
    image.sidebar-icon {
      &:dir(ltr) { padding-right: 8px; }
      &:dir(rtl) { padding-left: 8px; }
    }
    label.sidebar-label {
      &:dir(ltr) { padding-right: 2px; }
      &:dir(rtl) { padding-left: 2px; }
    }
    @at-root button.sidebar-button {
      min-width: 20px;
      min-height: 20px;
      padding: 0;
      @extend button.flat;

      &:not(:hover):not(:active) > image { opacity: 0.5 };
    }

    &.sidebar-placeholder-row {
      padding: 0 8px;
      min-height: 2px;
      background-image: _solid($drop_target_color);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: $selected_bg_color; }

    &:drop(active):not(:disabled) {
      &, label, image { color: $drop_target_color; }

      box-shadow: inset 0 1px $drop_target_color,
                  inset 0 -1px $drop_target_color;

      &:selected {
        &, label, image { color: $selected_fg_color; }
        background-color: $drop_target_color;
      }
    }
  }
}

//
// Placesview
//
placesview {
  .server-list-button > image {
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  // this selects the "connect to server" label
  > actionbar > revealer > box > label {
    padding-left: 8px;
    padding-right: 8px;
  }
}

//
// Paned
//
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none;
    border-style: none;
    background-color: transparent;
    background-image: _solid($borders_color);
    background-size: 1px 1px;

    &:selected { background-image: _solid($selected_bg_color); }

    &.wide {
      min-width: 5px;
      min-height: 5px;
      background-color: $bg_color;
      background-image: _solid($borders_color), _solid($borders_color);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;
    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }
    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}

//
// GtkInfoBar
//
infobar {
  border: none;

  &.info,
  &.question,
  &.warning,
  &.error {
    background-color: $infobar_bg_color;
    color: $infobar_fg_color;
    text-shadow: 0 #{$shadow_pos}px $infobar_text_shadow;
    border-color: mix($infobar_bg_color, black, 85%);
    border-style: solid;
    border-width: 0 0 1px 0;
  }
}

//
// Tooltips
//
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: transparentize(black, 0.2);
    background-clip: padding-box;

    label { padding: 4px; }
  }

  border-radius: 2px;
  box-shadow: none;

  decoration { background-color: transparent; }

  * { //Yeah this is ugly
    background-color: transparent;
    color: white; // just to be sure
  }
}

//
// Color Chooser
//
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  &, &:drop(active) { border-style: none; }

  $_colorswatch_radius: 2px;
  $_colorswatch_overlay_shadow: if($variant == 'light', inset 0 2px 2px -3px transparentize(black, 0.3),
                                                        inset 0 3px 2px -2px transparentize(black, 0.5));

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark overlay {
    color: $selected_fg_color;

    &:hover { border-color: if($variant == 'light', transparentize(black, 0.2), $borders_color); }
  }

  &.light overlay {
    color: $text_color;

    &:hover { border-color: if($variant == 'light', transparentize(black, 0.5), $borders_color); }
  }

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', darken($drop_target_color, 7%), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }

    &.dark overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', transparentize(black, 0.7), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }
  }

  overlay {
    box-shadow: $_colorswatch_overlay_shadow;
    border: 1px solid if($variant == 'light', transparentize(black, 0.7), $borders_color);

    &:hover { box-shadow: inset 0 1px transparentize(white, 0.7); }
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius $_colorswatch_radius 0 0;

    &:only-child { border-radius: $_colorswatch_radius; }

    overlay {
      @include button(normal);

      &:hover { @include button(hover); }
    }
  }

  &:disabled {
    opacity: 0.5;

    overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row:selected & { box-shadow: 0 0 0 2px $selected_fg_color; }

  &#editor-color-sample {
    border-radius: 2px;

    overlay { border-radius: 1.5px; }
  }
}

// colorscale popup
colorchooser .popover.osd { border-radius: 3px; }

button.color {
  padding: 4px;

  colorswatch:only-child {

    &, overlay { border-radius: 0; }

    box-shadow: 0 1px $light_text_icon_shadow;

    &:disabled { box-shadow: none; }
  }

  &:active colorswatch:only-child,
  &:checked colorswatch:only-child { box-shadow: none; }
}

//
// Misc
//

//content view (grid/list)
.content-view {
  background-color: $base_color;

  &:hover { -gtk-icon-effect: highlight; }

  rubberband { @extend rubberband; }
}

.scale-popup {
  .osd & { @extend %osd; }

  button { // +/- buttons on GtkVolumeButton popup
    &:hover {
      @include button(hover);
    }
  }
}

// Decouple the font of context menus from their entry/textview
.context-menu { font: initial; }
.monospace { font-family: Monospace; }

//
// Shortcuts Help
//
button.circular,
button.circular-button {
  padding: 0;
  min-width: 26px;
  min-height: 26px;
  border-radius: 50%;
  -gtk-outline-radius: 50%;

  @extend %circular-button;

  label { padding: 0; }
}

.keycap {
  min-width: 16px;
  min-height: 20px;

  padding: 3px 6px 4px 6px;

  color: $fg_color;
  background-color: $base_color;
  border: 1px solid $borders_color;
  border-radius: 2px;
  box-shadow: inset 0px -2px 0px if($variant=='light', transparentize(black, 0.9), transparentize(black, 0.85));
}


stackswitcher button {
  &.text-button { min-width: 80px; }
  &.circular { min-width: 0; }
}

//
// Dnd
//
*:drop(active):focus,
*:drop(active) {
  box-shadow: inset 0 0 0 1px $drop_target_color;
}

//
// Circular Button
//

%circular-button {
  border-image: none;
  border: 1px solid if($variant=='light', transparentize(black, 0.7), transparentize(black, 0.4));
  box-shadow: 0 1px transparentize(black, 0.9), inset 0 1px $highlight_shadow;

  &:focus {
    border-image: none;
    border: 1px solid transparentize($selected_bg_color, 0.3);
    box-shadow: 0 1px transparentize(black, 0.9), inset 0 1px $highlight_shadow;
  }
  &:active, &:checked {
    border-image: none;
    border: 1px solid if($variant=='light', transparentize(black, 0.5), transparentize(black, 0.35));
    box-shadow: 0 1px $highlight_shadow, inset 0 1px 2px transparentize(black, 0.8);
  }
}

//
// Window Decorations
//
decoration {
  border-radius: 3px 3px 0 0;
  border-width: 0px;

  box-shadow: 0 0 0 1px $window_frame, 0 3px 5px 1px $wm_shadow;

  // this is used for the resize cursor area
  margin: 10px;

  &:backdrop {
    box-shadow: 0 3px 5px 1px transparent,
                0 0 0 1px $window_frame, 0 2px 3px 0 $wm_shadow;
  }
  .fullscreen &,
  .tiled & {
    border-radius: 0;
  }
  .popup & {
    box-shadow: none;
    border-radius: 0;
  }
  // server-side decorations as used by mutter
  .ssd & {
    border-radius: 2.5px 2.5px 0 0;
    box-shadow: 0 0 0 1px $window_frame; //just doing borders, wm draws actual shadows

    &.maximized { border-radius: 0; }
  }

  .popup.csd & {
    border-radius: 0;
    @if $variant==light { box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.12); }
    @else { box-shadow: 0 1px 3px rgba(0, 0, 0, 0.7), 0 0 0 1px $borders_color; }
  }
  tooltip.csd & {
    border-radius: 3px;
    box-shadow: 0 1px 3px 1px rgba(0, 0, 0, 0.4);
  }
  messagedialog.csd & {
    border-radius: 3px;
  }
  .solid-csd & {
    border-radius: 0;
    margin: 1px 3px 3px 3px;
    background-color: $wm_bg_a;
    border: solid 1px if($darker=='false', $borders_color, nth($_borders_color, 2));
    box-shadow: inset 0 1px $wm_highlight;
  }
}

//
// Titlebuttons
//
headerbar,
.titlebar {

  &.default-decoration button.titlebutton { // no vertical padding for ssd buttons
    padding: 0 4px;                         // already handled by the titlebar-padding
    min-width: 0;
    min-height: 0;
    margin: 0;
  }

  button.titlebutton {
    padding: 0;
    min-width: 22px;
    color: $wm_title;

    @include button(undecorated);

    text-shadow: 0 #{$shadow_pos * $darker_shadow_pos}px $wm_title_shadow;
    -gtk-icon-shadow: none;

    &:hover {
      @include button(hover, $darker);
      -gtk-icon-shadow: none;
    }
    &:active, &:checked {
      @include button(active, $darker);
      -gtk-icon-shadow: none;
    }
    &:backdrop { color: $wm_unfocused_title; }

    &.close, &.maximize, &.minimize {

      color: transparent;
      border-image: none;
      box-shadow: none;
      background-position: center;
      background-repeat: no-repeat;

      background-image: -gtk-scaled(url('assets/titlebutton#{$darker_asset_suffix}.png'),url('assets/titlebutton#{$darker_asset_suffix}@2.png'));

      &:backdrop { background-image: -gtk-scaled(url('assets/titlebutton-unfocused#{$darker_asset_suffix}.png'),url('assets/titlebutton-unfocused#{$darker_asset_suffix}@2.png')); }
    }

    &.close:hover { background-image: -gtk-scaled(url('assets/titlebutton-close-hover#{$darker_asset_suffix}.png'),url('assets/titlebutton-close-hover#{$darker_asset_suffix}@2.png')); }
    &.close:active { background-image: -gtk-scaled(url('assets/titlebutton-close-active#{$darker_asset_suffix}.png'),url('assets/titlebutton-close-active#{$darker_asset_suffix}@2.png')); }

    &.maximize:hover { background-image: -gtk-scaled(url('assets/titlebutton-maximize-hover#{$darker_asset_suffix}.png'),url('assets/titlebutton-maximize-hover#{$darker_asset_suffix}@2.png')); }
    &.maximize:active { background-image: -gtk-scaled(url('assets/titlebutton-maximize-active#{$darker_asset_suffix}.png'),url('assets/titlebutton-maximize-active#{$darker_asset_suffix}@2.png')); }

    &.minimize:hover { background-image: -gtk-scaled(url('assets/titlebutton-minimize-hover#{$darker_asset_suffix}.png'),url('assets/titlebutton-minimize-hover#{$darker_asset_suffix}@2.png')); }
    &.minimize:active { background-image: -gtk-scaled(url('assets/titlebutton-minimize-active#{$darker_asset_suffix}.png'),url('assets/titlebutton-minimize-active#{$darker_asset_suffix}@2.png')); }
  }
}

// use dark variant buttons for selectionmode
headerbar.selection-mode button.titlebutton,
.titlebar.selection-mode button.titlebutton {

  &.close, &.maximize, &.minimize {
    background-image: -gtk-scaled(url('assets/titlebutton-dark.png'),url('assets/titlebutton-dark@2.png'));

    &:backdrop { background-image: -gtk-scaled(url('assets/titlebutton-unfocused-dark.png'),url('assets/titlebutton-unfocused-dark@2.png')); }
  }

  &.close:hover { background-image: -gtk-scaled(url('assets/titlebutton-close-hover-dark.png'),url('assets/titlebutton-close-hover-dark@2.png')); }
  &.close:active { background-image: -gtk-scaled(url('assets/titlebutton-close-active-dark.png'),url('assets/titlebutton-close-active-dark@2.png')); }

  &.maximize:hover { background-image: -gtk-scaled(url('assets/titlebutton-maximize-hover-dark.png'),url('assets/titlebutton-maximize-hover-dark@2.png')); }
  &.maximize:active { background-image: -gtk-scaled(url('assets/titlebutton-maximize-active-dark.png'),url('assets/titlebutton-maximize-active-dark@2.png')); }

  &.minimize:hover { background-image: -gtk-scaled(url('assets/titlebutton-minimize-hover-dark.png'),url('assets/titlebutton-minimize-hover-dark@2.png')); }
  &.minimize:active { background-image: -gtk-scaled(url('assets/titlebutton-minimize-active-dark.png'),url('assets/titlebutton-minimize-active-dark@2.png')); }
}

// catch all extend :)
%selected_items {
  background-color: $selected_bg_color;

  @at-root %nobg_selected_items, & {
    color: $selected_fg_color;
    outline-color: transparentize($selected_fg_color, 0.7);

    &:disabled { color: mix($selected_fg_color, $selected_bg_color, 50%); }
  }
}

%selected_gradient {
  color: $selected_fg_color;
  border-width: 1px 0;
  border-style: solid;
  border-top-color: mix($selected_bg_color, $base_color, 95%);
  border-bottom-color: mix($selected_bg_color, $base_color, 85%);
  text-shadow: 0 -1px $dark_text_icon_shadow;
  -gtk-icon-shadow: none;

  @if $variant==light {
    background-image: linear-gradient(to bottom,
                                      mix($selected_bg_color, $base_color, 90%),
                                      mix($selected_bg_color, $base_color, 70%));
  }
  @else {
    background-image: linear-gradient(to top,
                                      mix($selected_bg_color, $base_color, 90%),
                                      mix($selected_bg_color, $base_color, 70%));
  }
}
